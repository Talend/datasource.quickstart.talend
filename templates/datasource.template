{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "EMR + Redshift",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "AWS Security"
                    },
                    "Parameters": [
                        "KeyPair"
                    ]
                },
                {
                    "Label": {
                        "default": "Storage"
                    },
                    "Parameters": [
                        "SupportsGlacier"
                    ]
                },
                {
                    "Label": {
                        "default": "EMR"
                    },
                    "Parameters": [
                        "CreateEmr",
                        "EmrSubnetA"
                    ]
                },
                {
                    "Label": {
                        "default": "Redshift Configurations"
                    },
                    "Parameters": [
                        "CreateRedshift",
                        "RedshiftSubnetA",
                        "RedshiftSubnetB",
                        "RedshiftUsername",
                        "RedshiftPassword",
                        "RedshiftDbName",
                        "RedshiftPort"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "KeyPair": {
            "Description": "Key Name for Instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "CreateRedshift": {
            "Description": "Create Redshift.",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "RedshiftSecurityGroup": {
            "Description": "Redshift security group",
            "Type": "String"
        },
        "RedshiftSubnetA": {
            "Description": "Redshift subnet A",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "RedshiftSubnetB": {
            "Description": "Redshift subnet B",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "RedshiftUsername": {
            "Description": "RedShift Username",
            "Type": "String"
        },
        "RedshiftPassword": {
            "Description": "RedShift Password",
            "NoEcho": true,
            "Type": "String"
        },
        "RedshiftDbName": {
            "Description": "RedShift Database name",
            "Type": "String"
        },
        "RedshiftPort": {
            "Description": "RedShift Port",
            "Type": "String",
            "Default": "5439"
        },
        "CreateEmr": {
            "Description": "Create EMR.",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "EmrSubnetA": {
            "Description": "EMR Subnet A",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "TalendEmrSecurityGroup": {
            "Description": "Talend EMR Security Group.",
            "Type": "String"
        },
        "RemoteAccessEmrSecurityGroup": {
            "Description": "Remote access EMR Security Group.",
            "Type": "String"
        },
        "SupportsGlacier": {
            "Description": "Does this region support Glacier",
            "Type": "String",
            "Default": "true"
        }
    },
    "Mappings": {},
    "Conditions": {
        "IsGovCloud": {
            "Fn::Equals": [
                { "Ref": "AWS::Region" },
                "us-gov-west-1"
            ]
        },
        "SupportsGlacierCondition": {
            "Fn::Equals": [
                { "Ref": "SupportsGlacier" },
                true
            ]
        },
        "CreateRedshiftCondition": {
            "Fn::Equals": [
                { "Ref": "CreateRedshift" },
                "true"
            ]
        },
        "CreateEmrCondition": {
            "Fn::Equals": [
                { "Ref": "CreateEmr" },
                "true"
            ]
        }
    },
    "Resources": {
        "TalendStorageBucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Delete",
            "Properties": {
                "AccessControl": "Private",
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "Id": "Transition90daysRetain7yrs",
                            "Status": "Enabled",
                            "ExpirationInDays": 2555,
                            "Transition": {
                                "TransitionInDays": 90,
                                "StorageClass": {
                                    "Fn::If": [
                                        "SupportsGlacierCondition",
                                        "GLACIER",
                                        "STANDARD_IA"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            }
        },
        "TalendStorageS3Policy": {
            "Type": "AWS::S3::BucketPolicy",
            "DependsOn": "TalendStorageBucket",
            "Properties": {
                "Bucket": {
                    "Ref": "TalendStorageBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Sid": "EnforceSecureTransport",
                            "Action": "s3:*",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:${Endpoint}:s3:::${TalendStorageBucket}",
                                    {
                                        "Endpoint": {
                                            "Fn::If": [
                                                "IsGovCloud",
                                                "aws-us-gov",
                                                "aws"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            }
                        },
                        {
                            "Sid": "EnforceEncryptionOnPut",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:${Endpoint}:s3:::${TalendStorageBucket}/*",
                                    {
                                        "Endpoint": {
                                            "Fn::If": [
                                                "IsGovCloud",
                                                "aws-us-gov",
                                                "aws"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "AES256"
                                }
                            }
                        }
                    ]
                }
            }
        },
        "RedhsiftSubnetGroup": {
            "Type": "AWS::Redshift::ClusterSubnetGroup",
            "Condition": "CreateRedshiftCondition",
            "Properties": {
                "Description": "RedShift Subnet linked to both private database subnets",
                "SubnetIds": [
                    { "Ref": "RedshiftSubnetA" },
                    { "Ref": "RedshiftSubnetB" }
                ]
            }
        },
        "RedshiftInstance": {
            "Type": "AWS::Redshift::Cluster",
            "Condition": "CreateRedshiftCondition",
            "DependsOn": [ "RedhsiftSubnetGroup" ],
            "Properties": {
                "ClusterSubnetGroupName": { "Ref": "RedhsiftSubnetGroup" },
                "ClusterType": "single-node",
                "NodeType": "dc1.large",
                "VpcSecurityGroupIds": [ { "Ref": "RedshiftSecurityGroup" } ],
                "DBName": { "Ref": "RedshiftDbName" },
                "MasterUsername": { "Ref": "RedshiftUsername" },
                "MasterUserPassword": { "Ref": "RedshiftPassword" },
                "Port": { "Ref": "RedshiftPort" },
                "PubliclyAccessible": false
            }
        },
        "EmrInstance": {
            "Type": "AWS::EMR::Cluster",
            "Condition": "CreateEmrCondition",
            "Properties": {
                "Instances": {
                    "MasterInstanceGroup": {
                        "InstanceCount": 1,
                        "InstanceType": "m4.large",
                        "Market": "ON_DEMAND",
                        "Name": "Master"
                    },
                    "CoreInstanceGroup": {
                        "InstanceCount": 2,
                        "InstanceType": "m4.large",
                        "Market": "ON_DEMAND",
                        "Name": "Core"
                    },
                    "TerminationProtected": false,
                    "Ec2SubnetId": { "Ref": "EmrSubnetA" },
                    "Ec2KeyName": { "Ref": "KeyPair" },
                    "AdditionalMasterSecurityGroups": [
                        {
                            "Ref": "TalendEmrSecurityGroup"
                        },
                        {
                            "Ref": "RemoteAccessEmrSecurityGroup"
                        }
                    ],
                    "AdditionalSlaveSecurityGroups": [
                        {
                            "Ref": "TalendEmrSecurityGroup"
                        },
                        {
                            "Ref": "RemoteAccessEmrSecurityGroup"
                        }
                    ]
                },
                "Applications": [
                    { "Name": "Hadoop" },
                    { "Name": "Hive" },
                    { "Name": "Pig" },
                    { "Name": "Spark" }
                ],
                "ReleaseLabel": "emr-5.0.0",
                "Name": "EmrInstance",
                "JobFlowRole": "EMR_EC2_DefaultRole",
                "ServiceRole": "EMR_DefaultRole",
                "VisibleToAllUsers": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "emr-instance-${AWS::StackName}"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "TalendS3DomainName": {
            "Value": {
                "Fn::GetAtt": [
                    "TalendStorageBucket",
                    "DomainName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:TalendS3DomainName"
                }
            }
        },
        "EmrMasterPublicDns": {
            "Condition": "CreateEmrCondition",
            "Value": {
                "Fn::GetAtt": [
                    "EmrInstance",
                    "MasterPublicDNS"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:EmrMasterPublicDns"
                }
            }
        },
        "RedshiftEndpoint": {
            "Condition": "CreateRedshiftCondition",
            "Value": {
                "Fn::GetAtt": [
                    "RedshiftInstance",
                    "Endpoint.Address"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:RedshiftEndpoint"
                }
            }
        },
        "RedshiftPort": {
            "Condition": "CreateRedshiftCondition",
            "Value": {
                "Fn::GetAtt": [
                    "RedshiftInstance",
                    "Endpoint.Port"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:RedshiftPort"
                }
            }
        },
        "RedshiftJdbcUrl": {
            "Condition": "CreateRedshiftCondition",
            "Value": {
                "Fn::Sub": "jdbc:redshift://${RedshiftInstance.Endpoint.Address}:${RedshiftInstance.Endpoint.Port}/${RedshiftDbName}"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}:RedshiftJdbcUrl"
                }
            }
        }
    }
}